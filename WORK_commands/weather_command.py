"""–ü–û–ì–û–î–ê"""
import json
import types
import aiogram
from aiogram import *
from content.API_content import API_weather
import requests
import datetime
import math
from content.TEXT_content import *


class CreateDataWeather:
    """–ö–õ–ê–°–° –ü–û –†–ê–°–ü–ê–ö–û–í–ö–ï –î–ê–ù–´–•"""
    code_to_smile = {
        "Clear": "‚òÄÔ∏è –Ø—Å–Ω–æ",
        "Clouds": "‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ",
        "Rain": "üåß –î–æ–∂–¥—å",
        "Drizzle": "üå¶ –ú–∞–ª–µ–Ω—å–∫–∏–π –¥–æ–∂–¥—å",
        "Thunderstorm": "‚õà –ì—Ä–æ–∑–∞",
        "Snow": "‚ùÑÔ∏è –°–Ω–µ–≥",
        "Mist": "üò∂‚Äçüå´Ô∏è –¢—É–º–∞–Ω"
    }

    def __init__(self, response):
        self.response = response

    # –∞–Ω–ø–∞–∫–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
    def data_unpacking_weather(self):
        """–ê–ù–ü–ê–ö–ò–ù–ì –î–ê–ù–ù–´–• –ù–ê –°–ï–ì–û–î–ù–Ø –ò –ó–ê–í–¢–†–ê"""
        # –†–ê–°–ü–ê–ö–û–í–ö–ê –î–ê–ù–ù–´–• –ò–ó JSON
        self.data = self.response.json()
        self.city = self.data['city']['name']

        # –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        self.temp_m = self.data['list'][2]['main']['temp']  # —É—Ç—Ä–æ
        self.temp_d = self.data['list'][4]['main']['temp']  # –¥–µ–Ω—å
        self.temp_n = self.data['list'][6]['main']['temp']  # –≤–µ—á–µ—Ä
        # –æ—Å–∞–¥–∫–∏
        self.wea_m = self.code_to_smile[self.data['list'][2]['weather'][0]['main']]  # —É—Ç—Ä–æ
        self.wea_d = self.code_to_smile[self.data['list'][4]['weather'][0]['main']]  # –¥–µ–Ω—å
        self.wea_n = self.code_to_smile[self.data['list'][6]['weather'][0]['main']]  # –≤–µ—á–µ—Ä

        # –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        self.temp_m_f = self.data['list'][10]['main']['temp']  # —É—Ç—Ä–æ
        self.temp_d_f = self.data['list'][12]['main']['temp']  # –¥–µ–Ω—å
        self.temp_n_f = self.data['list'][14]['main']['temp']  # –≤–µ—á–µ—Ä
        # –æ—Å–∞–¥–∫–∏
        self.wea_m_f = self.code_to_smile[self.data['list'][10]['weather'][0]['main']]  # —É—Ç—Ä–æ
        self.wea_d_f = self.code_to_smile[self.data['list'][12]['weather'][0]['main']]  # –¥–µ–Ω—å
        self.wea_n_f = self.code_to_smile[self.data['list'][14]['weather'][0]['main']]  # –≤–µ—á–µ—Ä

    # –∞–Ω–ø–∞–∫–∏–Ω–≥ —Ñ—É–ª–ª –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    def data_unpacking_full(self):
        """–ê–ù–ü–ê–ö–ò–ù–ì –§–£–õ–õ –î–ê–ù–ù–´–• –ù–ê –°–ï–ì–û–î–ù–Ø"""
        # –†–ê–°–ü–ê–ö–û–í–ö–ê –î–ê–ù–ù–´–• –ò–ó JSON
        self.data_full = self.response.json()  # json –¥–∞–Ω–Ω—ã–µ
        self.city_full = self.data_full['name']
        self.weather_full = self.data_full['weather'][0]['main']
        self.temp_full = self.data_full['main']['temp']
        self.feels_like_full = self.data_full['main']['feels_like']
        self.temp_min_full = self.data_full['main']['temp_min']
        self.temp_max_full = self.data_full['main']['temp_max']
        self.pressure_full = self.data_full['main']['pressure']
        self.humidity_full = self.data_full['main']['humidity']
        self.wind_full = self.data_full['wind']['speed']
        self.sunrise_timestamp_full = datetime.datetime.fromtimestamp(self.data_full["sys"]["sunrise"])
        self.sunset_timestamp_full = datetime.datetime.fromtimestamp(self.data_full["sys"]["sunset"])
        self.length_of_the_day_full = self.sunset_timestamp_full - self.sunrise_timestamp_full

        if self.weather_full in self.code_to_smile:
            self.wd = self.code_to_smile[self.weather_full]
        else:
            self.wd = "–ù–µ –ø–æ–π–º—É –ø–æ–≥–æ–¥—É, –ø–æ–ø—Ä–æ–±—É–π —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å üò¢"

    # –∞–Ω–ø–∞–∫–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    def data_unpacking_tommorow(self):
        """–ê–ù–ü–ê–ö–ò–ù–ì –î–ê–ù–ù–´–• –ù–ê –ó–ê–í–¢–†–ê"""
        self.data_tom = self.response.json()  # json –¥–∞–Ω–Ω—ã–µ
        time_12 = []

        count = 0
        for time_zone in self.data_tom['list']:
            dt = time_zone['dt_txt']
            dt_date, dt_time = dt.split(' ')
            dt_time_parts = dt_time.split(':')
            twelv = dt_time_parts[0]

            if twelv == '12':
                time_12.append(count)

            count += 1

        index_tom = time_12[0]

        print(time_12)
        print(index_tom)
        # –†–ê–°–ü–ê–ö–û–í–ö–ê –î–ê–ù–ù–´–• –ò–ó JSON
        self.city_tom = self.data_tom['city']['name']
        self.weather_tom = self.data_tom['list'][index_tom]['weather'][0]['main']
        self.temp_tom = self.data_tom['list'][index_tom]['main']['temp']
        self.feels_like_tom = self.data_tom['list'][index_tom]['main']['feels_like']
        self.temp_min_tom = self.data_tom['list'][index_tom]['main']['temp_min']
        self.temp_max_tom = self.data_tom['list'][index_tom]['main']['temp_max']
        self.pressure_tom = self.data_tom['list'][index_tom]['main']['pressure']
        self.humidity_tom = self.data_tom['list'][index_tom]['main']['humidity']
        self.wind_tom = self.data_tom['list'][index_tom]['wind']['speed']
        self.dt_tom = self.data_tom['list'][index_tom]['dt_txt']

        if self.weather_tom in self.code_to_smile:
            self.wd_tom = self.code_to_smile[self.weather_tom]
        else:
            self.wd_tom = "–ù–µ –ø–æ–π–º—É –ø–æ–≥–æ–¥—É, –ø–æ–ø—Ä–æ–±—É–π —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å üò¢"


# —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
class CreateWeather(CreateDataWeather):
    """–ö–õ–ê–°–° –ü–û –°–û–ó–î–ê–ù–ò–Æ –ü–û–ì–û–î–´"""
    def __init__(self, response):
        super().__init__(response)  # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö json –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
    def create_weather(self):
        """–°–û–ó–î–ê–ù–ò–ï –ü–û–ì–û–î–´ –ù–ê –°–ï–ì–û–î–ù–Ø –ò –ó–ê–í–¢–†–ê (–∫–ª–∞—Å—Å)"""
        try:
            text_weather = f'''–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è  üåø{self.city}üåø  –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:
            - –£—Ç—Ä–æ: {self.temp_m}¬∞C, {self.wea_m}
            - –î–µ–Ω—å: {self.temp_d}¬∞C, {self.wea_d}
            - –í–µ—á–µ—Ä: {self.temp_n}¬∞C, {self.wea_n}
            
–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è  üåø{self.city}üåø  –Ω–∞ –∑–∞–≤—Ç—Ä–∞:
            - –£—Ç—Ä–æ: {self.temp_m_f}¬∞C, {self.wea_m_f}
            - –î–µ–Ω—å: {self.temp_d_f}¬∞C, {self.wea_d_f}
            - –í–µ—á–µ—Ä: {self.temp_n_f}¬∞C, {self.wea_n_f}
            '''

            return text_weather
        except KeyError:
            return

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö json –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
    def create_weather_full(self):
        """–°–û–ó–î–ê–ù–ò–ï –ü–û–ì–û–î–´ –§–£–õ–õ (–∫–ª–∞—Å—Å)"""
        try:
            text_weather = f'''üìÖ –ü–æ–≥–æ–¥–∞ –Ω–∞ {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n
        - –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {self.city_full} üèô
        - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {self.temp_full}¬∞C {self.wd}
        - –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {self.feels_like_full}¬∞C üå°
        - –í–µ—Ç–µ—Ä: {self.wind_full} –º/—Å üí®
        - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {self.temp_max_full}¬∞C üìà
        - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {self.temp_min_full}¬∞C üìâ
        - –î–∞–≤–ª–µ–Ω–∏–µ: {math.ceil(self.pressure_full / 1.333)} –º–º.—Ä—Ç.—Å—Ç ‚¨áÔ∏è
        - –í–ª–∞–∂–Ω–æ—Å—Ç—å: {self.humidity_full} % üíß
        - –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {self.sunrise_timestamp_full} üåÖ
        - –ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {self.sunset_timestamp_full} üåÑ
        - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {self.length_of_the_day_full} ‚è±\n\n
‚ù§Ô∏è –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è!
            '''

            print(json.dumps(self.data_full, indent=4, ensure_ascii=False))
            return text_weather
        except KeyError:
            return

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö json –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
    def create_weather_tommorow(self):
        """–°–û–ó–î–ê–ù–ò–ï –ü–û–ì–û–î–´ –ù–ê –ó–ê–í–¢–†–ê (–∫–ª–∞—Å—Å)"""
        try:
            text_weather = f'''üìÖ –ü–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n\n
        - –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {self.city_tom} üèô
        - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {self.temp_tom}¬∞C {self.wd_tom}
        - –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {self.feels_like_tom}¬∞C üå°
        - –í–µ—Ç–µ—Ä: {self.wind_tom} –º/—Å üí®
        - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {self.temp_max_tom}¬∞C üìà
        - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {self.temp_min_tom}¬∞C üìâ
        - –î–∞–≤–ª–µ–Ω–∏–µ: {math.ceil(self.pressure_tom / 1.333)} –º–º.—Ä—Ç.—Å—Ç ‚¨áÔ∏è
        - –í–ª–∞–∂–Ω–æ—Å—Ç—å: {self.humidity_tom} % üíß\n\n
‚ù§Ô∏è –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è!
            '''

            print(json.dumps(self.data_tom, indent=4, ensure_ascii=False))
            return text_weather
        except KeyError:
            return


# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
async def weather_ordinary(message: types.Message):
    """–§–£–ù–ö–¶–ò–Ø –ü–û–ì–û–î–´ –°–ï–ì–û–î–ù–Ø –ò –ó–ê–í–¢–†–ê"""
    mes = message.text.split(' ', 2)
    city = mes[2]

    print(city)

    # GET-–∑–∞–ø—Ä–æ—Å—ã
    response = requests.get(
        f"http://api.openweathermap.org/data/2.5/forecast?q={city}&cnt=16&lang=ru&units=metric&appid={API_weather}"
    )

    print(json.dumps(response.json(), indent=4))

    cr = CreateWeather(response)
    cr.data_unpacking_weather()
    weather_data = cr.create_weather()
    await message.answer(weather_data)


# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã —Ñ—É–ª–ª
async def weather_full(message: types.Message):
    """–§–£–ù–ö–¶–ò–Ø –ü–û–ì–û–î–´ –§–£–õ–õ"""
    mes = message.text.split(' ', 3)
    city = mes[3]

    print(city)

    # GET-–∑–∞–ø—Ä–æ—Å—ã
    response = requests.get(
        f"http://api.openweathermap.org/data/2.5/weather?q={city}&lang=ru&units=metric&appid={API_weather}"
    )

    print(json.dumps(response.json(), indent=4))

    cr = CreateWeather(response)
    cr.data_unpacking_full()
    weather_data = cr.create_weather_full()
    await message.answer(weather_data)


# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞
async def weather_tommorow(message: types.Message):
    """–§–£–ù–ö–¶–ò–Ø –ü–û–ì–û–î–´ –ù–ê –ó–ê–í–¢–†–ê"""
    mes = message.text.split(' ', 3)
    city = mes[3]

    print(city)

    # GET-–∑–∞–ø—Ä–æ—Å—ã
    response = requests.get(
        f"http://api.openweathermap.org/data/2.5/forecast?q={city}&cnt=16&lang=ru&units=metric&appid={API_weather}"
    )

    print(json.dumps(response.json(), indent=4))

    cr = CreateWeather(response)
    cr.data_unpacking_tommorow()
    weather_data = cr.create_weather_tommorow()
    await message.answer(weather_data)


# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π
# async def weather_forecast(message: types.Message):
#     """–§–£–ù–ö–¶–ò–Ø –ü–û–ì–û–î–´ –ù–ê 5 –î–ù–ï–ô"""
#     mes = message.text.split(' ', 2)
#     city = mes[2]
#
#     print(city)
#
#     # GET-–∑–∞–ø—Ä–æ—Å—ã
#     response = requests.get(
#         f"http://api.openweathermap.org/data/2.5/weather?q={city}&lang=ru&units=metric&appid={API_weather}"
#     )
#
#     print(json.dumps(response.json(), indent=4))
#
#     cr = CreateWeather(response)
#     cr.data_unpacking_tommorow()
#     weather_data = cr.create_weather_full()
#     await message.answer(weather_data)