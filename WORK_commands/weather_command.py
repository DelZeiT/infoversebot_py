"""–ü–û–ì–û–î–ê"""
import json
import types
from aiogram import *
from content.API_content import API_weather
import requests
import datetime
import math


# —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
class CreateWeather:
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ ‚òÄÔ∏è",
        "Clouds": "–û–±–ª–∞—á–Ω–æ ‚òÅÔ∏è",
        "Rain": "–î–æ–∂–¥—å üåß",
        "Drizzle": "–ú–∞–ª–µ–Ω—å–∫–∏–π –¥–æ–∂–¥—å üå¶",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ ‚õà",
        "Snow": "–°–Ω–µ–≥ ‚ùÑÔ∏è",
        "Mist": "–¢—É–º–∞–Ω üò∂‚Äçüå´Ô∏è"
    }

    def __init__(self, trigger, command, city, response):
        self.trigger = trigger
        self.command = command
        self.city = city
        self.response = response

    # –æ—à–∏–±–∫–∞
    def call_error(self):
        pass

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö json
    def create_data(self):
        # –†–ê–°–ü–ê–ö–û–í–ö–ê –î–ê–ù–ù–´–• –ò–ó JSON
        data = self.response.json()  # json –¥–∞–Ω–Ω—ã–µ
        city = data['name']
        weather = data['weather'][0]['main']
        temp = data['main']['temp']
        feels_like = data['main']['feels_like']
        temp_min = data['main']['temp_min']
        temp_max = data['main']['temp_max']
        pressure = data['main']['pressure']
        humidity = data['main']['humidity']
        wind = data['wind']['speed']
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
        length_of_the_day = sunset_timestamp - sunrise_timestamp

        if weather in self.code_to_smile:
            wd = self.code_to_smile[weather]
        else:
            wd = "–ù–µ –ø–æ–π–º—É –ø–æ–≥–æ–¥—É, –ø–æ–ø—Ä–æ–±—É–π —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å üò¢"

        text_weather = f'''üìÖ –ü–æ–≥–æ–¥–∞ –Ω–∞ {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')} 
        
        
    üèô –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city} 
    
    –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C {wd}
    
    üå° –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C 
    
    üí® –í–µ—Ç–µ—Ä: {wind} –º/—Å 
    
    üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_max}¬∞C 
    
    üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_min}¬∞C 
    
    üßº –î–∞–≤–ª–µ–Ω–∏–µ: {math.ceil(pressure/1.333)} –º–º.—Ä—Ç.—Å—Ç
    
    üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity} %
    
    üåÖ –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp} 
    
    üåÑ –ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp} 
    
    ‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day} 
    
    
‚ù§Ô∏è –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è! 
        '''


        return text_weather


# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã
async def weather_info(message: types.Message):
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏
    com_word_mes = message.text.split(' ', 2)
    trigger = com_word_mes[0].lower()  # —Ç—Ä–∏–≥–µ—Ä —Å–ª–æ–≤–æ
    command = com_word_mes[1].lower()  # –∫–æ–º–∞–Ω–¥–∞
    city = com_word_mes[2]  # –≥–æ—Ä–æ–¥

    # GET-–∑–∞–ø—Ä–æ—Å
    response = requests.get(
        f"http://api.openweathermap.org/data/2.5/weather?q={city}&lang=ru&units=metric&appid={API_weather}"
    )

    if trigger == '–∏—Ñ–∏' and command == '–ø–æ–≥–æ–¥–∞':
        create_weather = CreateWeather(trigger, command, city, response)
        weather_data = create_weather.create_data()
        await message.answer(weather_data)




